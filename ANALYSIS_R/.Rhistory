p + labs(
x = "Time needed (seconds)",
y = "Gender",
title= "Average time needed for solving tasks per gender"
)
p = ggplot(
data,
aes(x=Time_Needed_Mean, y=Task_Type),
) + geom_boxplot() + coord_flip()
p + labs(
x = "Time needed (seconds)",
y = "Task type",
title= "Time needed for solving types of tasks"
)
p = ggplot(data, aes(x=Time_Needed_Mean, y=BG_OS)) + geom_boxplot()
p + coord_flip()
p = ggplot(
data,
aes(x=Time_Needed_Mean, y=BG_OS),
) + geom_boxplot() + coord_flip()
p + labs(
x = "Time needed (seconds)",
y = "Operating system",
title= "Time needed for solving tasks based privatly owned operating system"
)
get_bootES_result <- function(vis1, vis2, task) {
##Data Preparation:
v1_v2 = data[data$Vis_Type %in% c(vis1, vis2),]
v1_v2_task = v1_v2[v1_v2$Task_Type == task,]
contrast_vector = setNames(c(1, -1), c(vis1, vis2))
## PRINTING BOOTES RESULTS
print(paste0("Result for ", vis1, " and ", vis2, " for task type ", task , ":"))
bootES(
v1_v2_task,
data.col = "Time_Needed_Mean",
group.col = "Vis_Type",
contrast = contrast_vector
)
}
task = "Distribution"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
get_bootES_result("Choriented Map", "GSM", task)
get_bootES_result("Choriented Map", "Choriented Mobile", task)
get_bootES_result("GSM", "Choriented Mobile", task)
task = "Cluster"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
get_bootES_result("Choriented Map", "GSM", task)
get_bootES_result("Choriented Map", "Choriented Mobile", task)
get_bootES_result("GSM", "Choriented Mobile", task)
task = "Trend"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
get_bootES_result("Choriented Map", "GSM", task)
get_bootES_result("Choriented Map", "Choriented Mobile", task)
get_bootES_result("GSM", "Choriented Mobile", task)
task = "Frequency"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
knitr::opts_chunk$set(echo = TRUE)
# Setup of libs & data
library(bootES)
library(readr)
library("ggplot2")
data = read_csv(
file = "study_data_preprocessed.csv",
col_names = TRUE,
)
age = data$BG_Age
summary(data$BG_Age[data$BG_Gender == "F"])
summary(data$BG_Age[data$BG_Gender == "M"])
boxplot(
BG_Age ~ BG_Gender,
data,
ylab= "Age",
xlab= "Gender"
)
gender = data$BG_Gender
#sum of genders has to be divided by 4 since each participants has 4 entries in the dataset (one for each visualization type)
number_of_males = sum(gender == "M") / 4
number_of_females = sum(gender == "F") / 4
print(paste0("Number of Male Participants: ", number_of_males))
print(paste0("Number of Female Participants: ", number_of_females))
gender_distribution = c(number_of_females, number_of_males)
piepercent<- round(100*gender_distribution/sum(gender_distribution), 1)
pie(
gender_distribution,
labels = piepercent,
main = "Gender Distribution",
col = rainbow(length(gender_distribution))
)
legend(
"topright",
c("Female", "Male"),
cex = 0.8,
fill =  rainbow(length(gender_distribution)),
title = "Distribution in %"
)
familiarity_index = data.frame(
"Value" = c(1:5),
"Description" = c("Very Unfamiliar",
"Unfamiliar",
"Neither Familiar nor Unfamiliar",
"Familiar",
"Very Familiar"
)
)
daily_usage_index = data.frame(
"Value" = c(1:6),
"Description" = c(" < 15 ",
"15 - 30",
"30 - 60",
"60 - 90",
"90 - 120",
"120 +"
)
)
weekly_usage_index = data.frame(
"Value" = c(1:5),
"Description" = c("Never",
"Once",
"2 - 4 times",
"4 - 8 times",
"More than 8 times"
)
)
usage_mapreading_index = data.frame(
"Value" = c(1:5),
"Description" = c("Never",
"Rarely",
"Sometimes",
"Often",
"Very Often"
)
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_choropleth = as.matrix(table(data$BG_Familiartiy_Choropleth) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_choropleth)),2])
row.names(familiarity_choropleth) = familiarity_row_names
piepercent<- round(100*familiarity_choropleth[,1]/sum(familiarity_choropleth[,1]), 1)
pie(
familiarity_choropleth,
labels = piepercent,
main = "Familiarity with Choropleth Maps",
col = rainbow(length(familiarity_choropleth))
)
legend(
"topright",
row.names(familiarity_choropleth),
cex = 0.8,
fill =  rainbow(length(familiarity_choropleth)),
title = "Distribution in %"
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_gsm = as.matrix(table(data$BG_Familiartiy_GSM) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_gsm)),2])
row.names(familiarity_gsm) = familiarity_row_names
piepercent<- round(100*familiarity_gsm[,1]/sum(familiarity_gsm[,1]), 1)
pie(
familiarity_gsm,
labels = piepercent,
main = "Familiarity with Graduaded Symbol Maps",
col = rainbow(length(familiarity_gsm))
)
legend(
"bottomleft",
row.names(familiarity_gsm),
cex = 0.8,
fill =  rainbow(length(familiarity_gsm)),
title = "Distribution in %"
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_eu_countries = as.matrix(table(data$BG_Knowledge_Geography_EU) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_eu_countries)),2])
row.names(familiarity_eu_countries) = familiarity_row_names
piepercent<- round(100*familiarity_eu_countries[,1]/sum(familiarity_eu_countries[,1]), 1)
pie(
familiarity_eu_countries,
labels = piepercent,
main = "Familiarity with the Geographical Location of EU Countries",
col = rainbow(length(familiarity_eu_countries))
)
legend(
"bottomleft",
row.names(familiarity_eu_countries),
cex = 0.8,
fill =  rainbow(length(familiarity_eu_countries)),
title = "Distribution in %"
)
os_data = data$BG_OS
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
os_distribution = table(os_data) / 4
barplot(
os_distribution,
beside = TRUE,
ylab = "Number of Participants",
xlab = "Operating System",
main = "Current Mobile Device Operating System \n",
density=15,
)
md_mapreading_usage = as.matrix(table(data$BG_UsageForMapReadingTasks) / 4)
familiarity_row_names = as.character(usage_mapreading_index[as.numeric(row.names(md_mapreading_usage)),2])
row.names(md_mapreading_usage) = familiarity_row_names
barplot(
md_mapreading_usage,
beside = TRUE,
names.arg = row.names(md_mapreading_usage),
ylab = "Number of Participants",
xlab = "Answer",
main = "How often do Participants use Mobile Devices for Map-Reading tasks \n",
density=15
)
daily_usage_data = as.matrix(table(data$BG_Daily_Usage) / 4)
familiarity_row_names = as.character(daily_usage_index[as.numeric(row.names(daily_usage_data)),2])
row.names(daily_usage_data) = familiarity_row_names
barplot(
daily_usage_data,
beside = TRUE,
names.arg = row.names(daily_usage_data),
ylab = "Number of Participants",
xlab = "Minutes",
main = "Daily Mobile Device Usage \n",
density=15
)
weekly_map_app_usage = as.matrix(table(data$BG_Weekly_Usage_MapsApplications) / 4)
familiarity_row_names = as.character(weekly_usage_index[as.numeric(row.names(weekly_map_app_usage)),2])
row.names(weekly_map_app_usage) = familiarity_row_names
barplot(
weekly_map_app_usage,
beside = TRUE,
names.arg = row.names(weekly_map_app_usage),
ylab = "Number of Participants",
xlab = "Frequency",
main = "Weekly Map Application Usage \n",
density=15
)
p = ggplot(
data,
aes(x=Confidence_Mean, y=Task_Type),
) + geom_boxplot() + coord_flip()
p + labs(
y = "Task type",
x = "Confidence (1.0 lowest - 5.0 highest)",
title= "Confidence distribution per task type"
)
p = ggplot(
data,
aes(x=Time_Needed_Mean, y=BG_Gender),
) + geom_boxplot() + coord_flip()
p + labs(
x = "Time needed (seconds)",
y = "Gender",
title= "Average time needed for solving tasks per gender"
)
p = ggplot(
data,
aes(x=Time_Needed_Mean, y=Task_Type),
) + geom_boxplot() + coord_flip()
p + labs(
x = "Time needed (seconds)",
y = "Task type",
title= "Time needed for solving types of tasks"
)
p = ggplot(data, aes(x=Time_Needed_Mean, y=BG_OS)) + geom_boxplot()
p + coord_flip()
p = ggplot(
data,
aes(x=Time_Needed_Mean, y=BG_OS),
) + geom_boxplot() + coord_flip()
p + labs(
x = "Time needed (seconds)",
y = "Operating system",
title= "Time needed for solving tasks based privatly owned operating system"
)
get_bootES_result <- function(vis1, vis2, task) {
##Data Preparation:
v1_v2 = data[data$Vis_Type %in% c(vis1, vis2),]
v1_v2_task = v1_v2[v1_v2$Task_Type == task,]
contrast_vector = setNames(c(1, -1), c(vis1, vis2))
## PRINTING BOOTES RESULTS
print(paste0("Result for ", vis1, " and ", vis2, " for task type ", task , ":"))
bootES(
v1_v2_task,
data.col = "Time_Needed_Mean",
group.col = "Vis_Type",
contrast = contrast_vector
)
}
task = "Distribution"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
get_bootES_result("Choriented Map", "GSM", task)
get_bootES_result("Choriented Map", "Choriented Mobile", task)
get_bootES_result("GSM", "Choriented Mobile", task)
task = "Cluster"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
get_bootES_result("Choriented Map", "GSM", task)
get_bootES_result("Choriented Map", "Choriented Mobile", task)
get_bootES_result("GSM", "Choriented Mobile", task)
task = "Trend"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
get_bootES_result("Choriented Map", "GSM", task)
get_bootES_result("Choriented Map", "Choriented Mobile", task)
get_bootES_result("GSM", "Choriented Mobile", task)
task = "Frequency"
get_bootES_result("Choropleth Map", "GSM", task)
get_bootES_result("Choropleth Map", "Choriented Map", task)
get_bootES_result("Choropleth Map", "Choriented Mobile", task)
get_bootES_result("Choriented Map", "GSM", task)
get_bootES_result("Choriented Map", "Choriented Mobile", task)
get_bootES_result("GSM", "Choriented Mobile", task)
task = data[data$Task_Type == "Trend",]
contrast_vector = setNames(c(1, -1), c("Choropleth Map", "GSM"))
a = task[get("Vis_Type", task) %in% c("Choropleth Map", "GSM"),]
print("Choropleth Map - GSM")
bootES(
a,
data.col = "Effectivness",
group.col = "Vis_Type",
contrast = contrast_vector,
)
contrast_vector = setNames(c(1, -1), c("Choropleth Map", "Choriented Map"))
a = task[get("Vis_Type", task) %in% c("Choropleth Map", "Choriented Map"),]
print("Choropleth Map - Choriented Map")
bootES(
a,
data.col = "Effectivness",
group.col = "Vis_Type",
contrast = contrast_vector,
)
contrast_vector = setNames(c(1, -1), c("Choropleth Map", "Choriented Mobile"))
a = task[get("Vis_Type", task) %in% c("Choropleth Map", "Choriented Mobile"),]
print("Choropleth Map - Choriented Mobile")
bootES(
a,
data.col = "Effectivness",
group.col = "Vis_Type",
contrast = contrast_vector,
)
contrast_vector = setNames(c(1, -1), c("Choriented Map", "GSM"))
a = task[get("Vis_Type", task) %in% c("Choriented Map", "GSM"),]
print("Choriented Map - GSM")
bootES(
a,
data.col = "Effectivness",
group.col = "Vis_Type",
contrast = contrast_vector,
)
contrast_vector = setNames(c(1, -1), c("Choriented Map", "Choriented Mobile"))
a = task[get("Vis_Type", task) %in% c("Choriented Map", "Choriented Mobile"),]
print("Choriented Map - Choriented Mobile")
bootES(
a,
data.col = "Effectivness",
group.col = "Vis_Type",
contrast = contrast_vector,
)
contrast_vector = setNames(c(1, -1), c("GSM", "Choriented Mobile"))
a = task[get("Vis_Type", task) %in% c("GSM", "Choriented Mobile"),]
print("GSM - Choriented Mobile")
bootES(
a,
data.col = "Effectivness",
group.col = "Vis_Type",
contrast = contrast_vector,
)
daily_usage_data = as.matrix(table(data$BG_Daily_Usage) / 4)
familiarity_row_names = as.character(daily_usage_index[as.numeric(row.names(daily_usage_data)),2])
row.names(daily_usage_data) = familiarity_row_names
barplot(
daily_usage_data,
beside = TRUE,
names.arg = row.names(daily_usage_data),
ylab = "Number of Participants",
xlab = "Minutes",
density=15
)
md_mapreading_usage = as.matrix(table(data$BG_UsageForMapReadingTasks) / 4)
familiarity_row_names = as.character(usage_mapreading_index[as.numeric(row.names(md_mapreading_usage)),2])
row.names(md_mapreading_usage) = familiarity_row_names
barplot(
md_mapreading_usage,
beside = TRUE,
names.arg = row.names(md_mapreading_usage),
ylab = "Number of Participants",
xlab = "Answer",
density=15
)
weekly_map_app_usage = as.matrix(table(data$BG_Weekly_Usage_MapsApplications) / 4)
familiarity_row_names = as.character(weekly_usage_index[as.numeric(row.names(weekly_map_app_usage)),2])
row.names(weekly_map_app_usage) = familiarity_row_names
barplot(
weekly_map_app_usage,
beside = TRUE,
names.arg = row.names(weekly_map_app_usage),
ylab = "Number of Participants",
xlab = "Frequency",
density=15
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_eu_countries = as.matrix(table(data$BG_Knowledge_Geography_EU) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_eu_countries)),2])
row.names(familiarity_eu_countries) = familiarity_row_names
piepercent<- round(100*familiarity_eu_countries[,1]/sum(familiarity_eu_countries[,1]), 1)
pie(
familiarity_eu_countries,
labels = piepercent,
col = rainbow(length(familiarity_eu_countries))
)
legend(
"bottomleft",
row.names(familiarity_eu_countries),
cex = 0.8,
fill =  rainbow(length(familiarity_eu_countries)),
title = "Distribution in %"
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_gsm = as.matrix(table(data$BG_Familiartiy_GSM) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_gsm)),2])
row.names(familiarity_gsm) = familiarity_row_names
piepercent<- round(100*familiarity_gsm[,1]/sum(familiarity_gsm[,1]), 1)
pie(
familiarity_gsm,
labels = piepercent,
main = "Familiarity with Graduaded Symbol Maps",
col = rainbow(length(familiarity_gsm))
)
legend(
"bottomleft",
row.names(familiarity_gsm),
cex = 0.8,
fill =  rainbow(length(familiarity_gsm)),
title = "Distribution in %"
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_gsm = as.matrix(table(data$BG_Familiartiy_GSM) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_gsm)),2])
row.names(familiarity_gsm) = familiarity_row_names
piepercent<- round(100*familiarity_gsm[,1]/sum(familiarity_gsm[,1]), 1)
pie(
familiarity_gsm,
labels = piepercent,
col = rainbow(length(familiarity_gsm))
)
legend(
"bottomleft",
row.names(familiarity_gsm),
cex = 0.8,
fill =  rainbow(length(familiarity_gsm)),
title = "Distribution in %"
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_choropleth = as.matrix(table(data$BG_Familiartiy_Choropleth) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_choropleth)),2])
row.names(familiarity_choropleth) = familiarity_row_names
piepercent<- round(100*familiarity_choropleth[,1]/sum(familiarity_choropleth[,1]), 1)
pie(
familiarity_choropleth,
labels = piepercent,
main = "Familiarity with Choropleth Maps",
col = rainbow(length(familiarity_choropleth))
)
legend(
"topright",
row.names(familiarity_choropleth),
cex = 0.8,
fill =  rainbow(length(familiarity_choropleth)),
title = "Distribution in %"
)
#Divided by 4 because each participant is contained 4 times in the dataset, because there are 4 visualization types
familiarity_choropleth = as.matrix(table(data$BG_Familiartiy_Choropleth) / 4)
familiarity_row_names = as.character(familiarity_index[as.numeric(row.names(familiarity_choropleth)),2])
row.names(familiarity_choropleth) = familiarity_row_names
piepercent<- round(100*familiarity_choropleth[,1]/sum(familiarity_choropleth[,1]), 1)
pie(
familiarity_choropleth,
labels = piepercent,
col = rainbow(length(familiarity_choropleth))
)
legend(
"topright",
row.names(familiarity_choropleth),
cex = 0.8,
fill =  rainbow(length(familiarity_choropleth)),
title = "Distribution in %"
)
p = ggplot(
data,
aes(x=Time_Needed_Mean, y=Task_Type),
) + geom_boxplot() + coord_flip()
p + labs(
x = "Time needed (seconds)",
y = "Task type",
)
p = ggplot(
data,
aes(x=Time_Needed_Mean, y=Task_Type),
) + geom_boxplot() + coord_flip()
p + labs(
x = "Time needed (seconds)",
y = "Task type"
)
